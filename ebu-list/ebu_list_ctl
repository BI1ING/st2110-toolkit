#!/bin/bash

usage()
{
    echo "$0 is a wrapper script that manages EBU-LIST
and related sub-services (DB, backend, UI, etc.)
Usage:
    $0 [-v] {start|stop|status|log|install|upgrade|dev}
        start    start docker containers and server
        stop     stop docker containers and server
        status   check the status of all the st 2110 services
        log      get the logs of the server+containers
        install  install EBU-LIST for the first time
        upgrade  upgrade to next stable version fron public Github
        dev      upgrade to the next release from private repo
" >&2
}

log_ebu_list()
{
    logger -t "st2110-ebulist" "$@"
}

if [ $1 = "-v" ]; then
    DEBUG=true
    set -x
    shift
fi

ST2110_CONF_FILE=/etc/st2110.conf
if [ -f $ST2110_CONF_FILE ]; then
    . $ST2110_CONF_FILE
fi

if [ -z $LIST_PATH -o -z $ST2110_USER ]; then
    log_ebu_list "Missing param LIST_PATH or ST2110_USER..."
    exit 1
fi

ORIG_PATH=$(pwd)
MGMT_IP=$(ip addr show $MGMT_IFACE | tr -s ' ' | sed -n 's/ inet \(.*\)\/.*/\1/p')

# In prod, nginx is used as proxy to expose port 80 only
if [ $LIST_DEV = "true" ]; then
    PROFILE="dev"
    LIST_API_PORT=3030
    if [ $LIST_GUI = 2 ]; then
        LIST_GUI_PORT=3000
    else
        LIST_GUI_PORT=8080
    fi
else
    PROFILE="prod"
    LIST_API_PORT=80
    LIST_GUI_PORT=80
fi

show_header()
{
    printf  "\e[1;29m%s\e[m\n" "$1"
}

show_status()
{
    if [ "$2" = 'UP' ]; then
        color=32 #green
        len=5
    elif [ "$2" = 'DOWN' ]; then
        color=31 #red
        len=5
    else
        color=34 #blue
        len=25
    fi
    printf  "%-20.20s \e[1;${color}m%-${len}.${len}s \e[1;34m%-25.25s %s\e[m\n" "$1" "$2" "$3" "$4"
}

get_status()
{
    if $2 2>&1 | grep -q "$3"; then
        ret="UP"
    else
        ret="DOWN"
    fi
    show_status "$1" "$ret" $4
}

start()
{
    if get_status "API response" "curl -v http://$MGMT_IP:$LIST_API_PORT/api/meta/version 2>&1" "401 Unauthorized" | grep -q UP; then
        echo "EBU-LIST is already up"
        return
    fi

    if ! ping -W 1 -c 1 -q $MGMT_IP > /dev/null; then
        log_ebu_list "Couln't ping $MGMT_IP for interface $MGMT_IFACE, exit."
        exit 1
    fi

    export EBU_LIST_LIVE_MODE=true

    if [ $LIST_DEV = "true" ]; then
        log_ebu_list "Start containers: mongo, influxdb and rabbitmq"
        cd $LIST_PATH/apps/external/
        docker-compose up -d

        log_ebu_list "Start the UI v$LIST_GUI"
        if [ $LIST_GUI = "2" ]; then
            cd $LIST_PATH/apps/gui-v2/
            yarn start 2>&1 > /tmp/list-gui.log &
        else
            cd $LIST_PATH/apps/gui/
            npm start 2>&1 > /tmp/list-gui.log &
        fi

        log_ebu_list "Start the server"
        cd $LIST_PATH/apps/listwebserver
        sed "s,\(folder:\).*,\1 $LIST_DATA_FOLDER,;
            s,\(cpp:\).*,\1 $LIST_PATH/build/bin,;
            s,\(webappDomain:\).*,\1 http://$MGMT_IP:$LIST_GUI_PORT,;
            " ./config.yml > ./running_config.yml
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$LIST_PATH/build/lib/
        npm run dev -- ./running_config.yml --dev --live 2>&1 > /tmp/list-server.log &

        log_ebu_list "Start stream pre-processor"
        $LIST_PATH/build/bin/stream_pre_processor amqp://localhost:5672 2>&1 > /tmp/list-pre-processor.log &
    else
        log_ebu_list "Start containers: mongo, influxdb, rabbitmq and EBU-LIST"
        cd $LIST_PATH
        export EBU_LIST_WEB_APP_DOMAIN=http://$MGMT_IP:80
        export EBU_LIST_HOST_DATA_FOLDER=$LIST_DATA_FOLDER
        docker-compose up -d
    fi
}

stop()
{
    if [ $LIST_DEV = "true" ]; then
        killall -9 node
        killall stream_pre_processor
        cd $LIST_PATH/apps/external/
    else
        cd $LIST_PATH
    fi
    docker-compose stop # 'down' may break the DBs
    echo "You may need to 'sudo service docker restart' before starting EBU-LIST again (if Mongo DB doesn't respond)."
}

port_status()
{
    id=$1
    if [ -z $2 ]; then return 1; fi
    iface=$2

    media_ip=$(ip addr show $iface | tr -s ' ' | sed -n 's/ inet \(.*\)\/.*/\1/p')
    media_gw_ip=$(ip route | sed -n 's/default via \(.*\) dev '""$(echo $iface | tr -d '\n')""' .*/\1/p')

    switch_name=$(lldpcli show neighbors port $iface | tr -s ' ' | sed -n 's/.*SysName: \(.*\)/\1/p')
    switch_ip=$(lldpcli show neighbors port $iface | tr -s ' ' | sed -n 's/.*MgmtIP: \(.*\)/\1/p')
    media_gw_port=$(lldpcli show neighbors port $iface | tr -s ' ' | sed -n 's/.*PortID: \(.*\)/\1/p')
    get_status "Interface $id" "ip addr show $iface" "$iface: .* UP" "$iface $media_ip"
    get_status "Gateway   $id" "ping -c 1 -W 1 -I $iface $media_gw_ip" "1 received" "$media_gw_port $media_gw_ip"
    get_status "Switch    $id" "ping -c 1 -W 1 $switch_ip" "1 received" "$switch_name $switch_ip"
}

status()
{

    echo "-----------------------------------------------"
    echo "                EBU-LIST Status"
    echo "-----------------------------------------------"
    show_status "Hostname" "$(hostname)"
    get_status "Mgt interface" "ping -c 1 -W 1 $MGMT_IP" "1 received" "$MGMT_IFACE $MGMT_IP"
    echo "-----------------------------------------------"
    show_header "Media interfaces"
    #get_status "NIC driver" "find /dev/mst/" "/dev/mst/mt.*_pciconf."
    port_status 0 $MEDIA_IFACE_0
    port_status 1 $MEDIA_IFACE_1
    echo "-----------------------------------------------"
    ptp_ip=$(ip addr show $PTP_IFACE_0 | tr -s ' ' | sed -n 's/ inet \(.*\)\/.*/\1/p')
    ptp_filter="src host $ptp_ip and dst host 224.0.1.129"
    show_header "PTP"
    get_status "ptp4l" "ps aux" "[p]tp4l"
    get_status "phc2sys   0" "ps aux" "[p]hc2sys -s $PTP_IFACE_0 -c CLOCK_REALTIME"
    if [ ! -z $PTP_IFACE_1 ]; then
        get_status "phc2sys   1" "ps aux" "[p]hc2sys -s $PTP_IFACE_0 -c $PTP_IFACE_1"
    fi
    get_status "Lock" "journalctl -n10" "phc2sys.* s2 freq "
    get_status "PTP traffic" "timeout 2 tcpdump -i $PTP_IFACE_0 -c2 $ptp_filter" "2 packets captured"
    echo "-----------------------------------------------"
    show_header "Docker"
    get_status "Daemon" "ps aux" "[d]ockerd"
    get_status "Network" "ping -c 1 -W 1 172.17.0.1" "1 received"
    get_status "Service Mongo DB" "docker ps" "mongo"
    get_status "Service Influx DB" "docker ps" "influxdb"
    get_status "Service Rabbit MQ" "docker ps" "rabbitmq"
    echo "-----------------------------------------------"
    show_header "LIST"
    show_status "Profile" "$PROFILE"
    #TODO: get LIST version
    if [ $LIST_DEV = "true" ]; then
        get_status "node API" "ps aux" "[n]ode .*server.js .*--live"
        get_status "node GUI" "ps aux" "[n]ode .*gui"
    else
        # in prod, API and GUI are both servered by the same docker container
        get_status "container" "docker ps" "list"
    fi
    get_status "API response" "curl -v
    http://$MGMT_IP:$LIST_API_PORT/api/meta/version 2>&1" "major.*minor.*patch"
    get_status "GUI response" "curl http://$MGMT_IP:$LIST_GUI_PORT 2>/dev/null" "logo"
    get_status "Pre processor" "ps aux" "[s]tream_pre_processor"
    get_status "Capture probe" "ps aux" "[n]ode .*dpdk.yml"
}

log()
{
    tail -f -n200 /tmp/list*.log &

    cd $LIST_PATH
    if [ $LIST_DEV == "true" ]; then
        cd ./apps/external/
    fi

    docker-compose logs -f --tail=500
    # ctrl-C
    killall tail
}

install()
{
    set -eux

    # dev mode means build application from source
    if [ $LIST_DEV = "true" ]; then
        cd ~
        git clone https://github.com/ebu/pi-list.git $LIST_DIR
        cd $LIST_DATA
        git submodule update --init --recursive
        sudo ./scripts/setup_build_env.sh
        echo "Get token to access online translation file."
        cd ./apps/gui/data/ && node translationsGenerator.js -t
        cd -
        ./scripts/deploy/deploy.sh
    # whereas non dev mode means install from public docker image
    else
        mkdir -p $LIST_PATH
        cd $LIST_PATH
        curl -O https://raw.githubusercontent.com/ebu/pi-list/master/docs/docker-compose.yml
        docker-compose pull
        # for live:
        #cd $LIST_PATH/js/common_server/
        #npm install
        #cd $LIST_PATH/apps/capture_probe/
        #npm install
    fi

    set +eux
}

upgrade()
{
    stop
    cd $LIST_PATH

    if [ $LIST_DEV = "true" ]; then
        repo=$1
        branch=$2

        git status
        echo "Local changes will be deleted:"
        echo "Do you really want to upgrade EBU-LIST from repo $repo/$branch? [y/n]"
        read y
        if [ $y != "y" ]; then
            echo "Abort."
            exit
        fi

        set -eux

        git reset --hard
        git checkout $branch
        git pull $repo $branch
        git submodule update --init --recursive

        ./scripts/deploy/deploy.sh

        set +eux
    else
        curl -O https://raw.githubusercontent.com/ebu/pi-list/master/docs/docker-compose.yml
        docker-compose pull
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    log)
        log
        ;;
    upgrade)
        upgrade origin master
        ;;
    dev)
        # upgrade <remote> <branch>
        upgrade devops release
        ;;
    install)
        install
        ;;
    *)
        usage
        exit 1
        ;;
esac

cd $ORIG_PATH

if [ ! -z $DEBUG ]; then
    set +x
fi

exit 0
