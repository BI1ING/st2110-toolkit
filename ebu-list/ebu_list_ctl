#!/bin/bash

log_ebu_list()
{
    logger -t "st2110-ebulist" "$@"
}

ST2110_CONF_FILE=/etc/st2110.conf
if [ -f $ST2110_CONF_FILE ]; then
    . $ST2110_CONF_FILE
fi

if [ -z $LIST_PATH -o -z $ST2110_USER ]; then
    log_ebu_list "Missing param LIST_PATH or ST2110_USER..."
    exit 1
fi

path=$(pwd)

start()
{
    IP=$(ip addr show $MGMT_IFACE | tr -s ' ' | sed -n 's/ inet \(.*\)\/.*/\1/p')
    if ! ping -W 1 -c 1 -q $IP > /dev/null; then
        echo "Couln't ping $IP for interface $MGMT_IFACE, exit."
        exit 1
    fi

    log_ebu_list "Start mongo and influx"
    cd $LIST_PATH/apps/external/
    docker-compose up -d

    log_ebu_list "Start the UI"
    cd $LIST_PATH/apps/gui/
    npm start 2>&1 > /tmp/list-gui.log &

    log_ebu_list "Start the capture probe"
    cd $LIST_PATH/apps/capture_probe/
    sed -i "s,\(.*interface:\).*,\1 $MEDIA_IFACE,;
        s,\(.*bin:\).*,\1 $LIST_PATH/build/bin,;
        " ./config.yml
    npm run dev -- config.yml 2>&1 > /tmp/list-capture.log &

    log_ebu_list "Start the server"
    cd $LIST_PATH/apps/listwebserver
    sed -i "s,\(folder:\).*,\1 $LIST_DATA_FOLDER,;
        s,\(cpp:\).*,\1 $LIST_PATH/build/bin,;
        s,\(webappDomain:\).*,\1 http://$IP:8080,;
        " ./config.yml
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$LIST_PATH/build/lib/
    nodemon ./server.js -- config.yml --dev --live 2>&1 > /tmp/list-server.log &
}

stop()
{
    killall -9 node
    cd $LIST_PATH/apps/external/
    docker-compose down
}

get_status()
{
    if $2 | grep -q "$3"; then
        ret="UP"
    else
        ret="DOWN"
    fi
    printf  "%-30.30s: %s\n" "$1" "$ret"
}

status()
{
    echo "Status:"
    get_status "Media interface" "ip addr show $MEDIA_IFACE" "$MEDIA_IFACE: .* UP"
    get_status "Ptp for Linux daemon" "ps aux" "[p]tp4l"
    get_status "Ptp to NIC" "ps aux" "[p]hc2sys"
    get_status "Docker daemon" "ps aux" "[d]ockerd"
    get_status "Mongo DB" "docker ps" "mongo"
    get_status "Influx DB" "docker ps" "influxdb"
    get_status "Rabbit MQ" "docker ps" "rabbitmq"
    get_status "LIST server" "ps aux" "[n]ode .*server.js"
    get_status "LIST gui" "ps aux" "[n]ode .*gui"
    get_status "LIST capture" "ps aux" "[n]ode .*capture"
}

log()
{
    tail -f /tmp/list*.log
}

upgrade()
{
    cd $LIST_PATH

    git status
    echo "Changes will be deleted."
    echo "Do you really want to upgrade? [y/n]"
    read y
    if [ $y != "y" ]; then
        echo "Abort."
        exit
    fi

    set -eux
    git reset --hard
    git checkout release
    git fetch devops
    git merge devops/release
    git submodule update --init --recursive

    ./scripts/deploy/deploy.sh

    set +eux
}

usage()
{
    echo "Usage: $0 {start|stop|status|log|upgrade}" >&2
}
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    log)
        log
        ;;
    upgrade)
        upgrade
        ;;
    *)
        usage
        exit 1
        ;;
esac

cd $path

exit 0
