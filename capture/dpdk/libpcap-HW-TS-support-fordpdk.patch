From 12cd665d33b7a103bd98ad80cdbe3b4f9d66b51d Mon Sep 17 00:00:00 2001
From: Patrick Keroulas <patrick.keroulas@radio-canada.ca>
Date: Tue, 21 Jul 2020 16:18:39 -0400
Subject: dpdk: support HW timestamps

---
 pcap-dpdk.c | 92 ++++++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 74 insertions(+), 18 deletions(-)

diff --git a/pcap-dpdk.c b/pcap-dpdk.c
index 837ad1c2..cc3ad0ef 100644
--- a/pcap-dpdk.c
+++ b/pcap-dpdk.c
@@ -89,6 +89,10 @@ env DPDK_CFG="--log-level=debug -l0 -dlibrte_pmd_e1000.so -dlibrte_pmd_ixgbe.so
 
 #include <sys/time.h>
 
+#ifdef HAVE_LINUX_NET_TSTAMP_H
+#include <linux/net_tstamp.h>
+#endif
+
 //header for calling dpdk
 #include <rte_config.h>
 #include <rte_common.h>
@@ -168,6 +172,19 @@ static uint16_t nb_txd = RTE_TEST_TX_DESC_DEFAULT;
 #define RTE_ETH_PCAP_SNAPLEN ETHER_MAX_JUMBO_FRAME_LEN
 #endif
 
+/*
+ * Map SOF_TIMESTAMPING_ values to PCAP_TSTAMP_ values.
+ */
+static const struct {
+	int soft_timestamping_val;
+	int pcap_tstamp_val;
+} sof_ts_type_map[3] = {
+	{ SOF_TIMESTAMPING_SOFTWARE, PCAP_TSTAMP_HOST },
+	{ SOF_TIMESTAMPING_SYS_HARDWARE, PCAP_TSTAMP_ADAPTER },
+	{ SOF_TIMESTAMPING_RAW_HARDWARE, PCAP_TSTAMP_ADAPTER_UNSYNCED }
+};
+#define NUM_SOF_TIMESTAMPING_TYPES	(sizeof sof_ts_type_map / sizeof sof_ts_type_map[0])
+
 static struct rte_eth_dev_tx_buffer *tx_buffer;
 
 struct dpdk_ts_helper{
@@ -253,23 +270,40 @@ static void dpdk_fmt_errmsg_for_rte_errno(char *errbuf, size_t errbuflen,
 }
 
 static int dpdk_init_timer(struct pcap_dpdk *pd){
+	struct timeval now;
+	rte_eth_read_clock(pd->portid, &pd->ts_helper.start_cycles);
+	rte_eth_get_clock_freq(pd->portid, &pd->ts_helper.hz);
+
 	gettimeofday(&(pd->ts_helper.start_time),NULL);
+	/*
 	pd->ts_helper.start_cycles = rte_get_timer_cycles();
 	pd->ts_helper.hz = rte_get_timer_hz();
 	if (pd->ts_helper.hz == 0){
 		return -1;
 	}
+	*/
 	return 0;
 }
-static inline void calculate_timestamp(struct dpdk_ts_helper *helper,struct timeval *ts)
+static int prout = 0;
+static inline void calculate_timestamp(struct dpdk_ts_helper *helper,struct timeval *ts, struct rte_mbuf *pkt)
 {
 	uint64_t cycles;
 	// delta
 	struct timeval cur_time;
-	cycles = rte_get_timer_cycles() - helper->start_cycles;
-	cur_time.tv_sec = (time_t)(cycles/helper->hz);
-	cur_time.tv_usec = (suseconds_t)((cycles%helper->hz)*1e6/helper->hz);
-	timeradd(&(helper->start_time), &cur_time, ts);
+
+	if (pkt && (pkt->ol_flags & PKT_RX_TIMESTAMP)) {
+		uint64_t start_ts_ns = helper->start_time.tv_sec * 1000000000 + helper->start_time.tv_usec * 1000;
+		uint64_t ts_ns = start_ts_ns +
+			(pkt->timestamp - helper->start_cycles) * 1000000000 / helper->hz;
+		ts->tv_sec  = ts_ns / 1000000000;
+		ts->tv_usec = ts_ns % 1000000000;
+	}
+	else {
+		cycles = rte_get_timer_cycles() - helper->start_cycles;
+		cur_time.tv_sec = (time_t)(cycles/helper->hz);
+		cur_time.tv_usec = (suseconds_t)((cycles%helper->hz)*1e6/helper->hz);
+		timeradd(&(helper->start_time), &cur_time, ts);
+	}
 }
 
 static uint32_t dpdk_gather_data(unsigned char *data, uint32_t len, struct rte_mbuf *mbuf)
@@ -363,7 +397,7 @@ static int pcap_dpdk_dispatch(pcap_t *p, int max_cnt, pcap_handler cb, u_char *c
 		pkt_cnt += nb_rx;
 		for ( i = 0; i < nb_rx; i++) {
 			m = pkts_burst[i];
-			calculate_timestamp(&(pd->ts_helper),&(pcap_header.ts));
+			calculate_timestamp(&(pd->ts_helper),&(pcap_header.ts), m);
 			pkt_len = rte_pktmbuf_pkt_len(m);
 			// caplen = min(pkt_len, p->snapshot);
 			// caplen will not be changed, no matter how long the rte_pktmbuf
@@ -447,7 +481,7 @@ static void nic_stats_display(struct pcap_dpdk *pd)
 static int pcap_dpdk_stats(pcap_t *p, struct pcap_stat *ps)
 {
 	struct pcap_dpdk *pd = p->priv;
-	calculate_timestamp(&(pd->ts_helper), &(pd->curr_ts));
+	calculate_timestamp(&(pd->ts_helper), &(pd->curr_ts), NULL);
 	rte_eth_stats_get(pd->portid,&(pd->curr_stats));
 	if (ps){
 		ps->ps_recv = pd->curr_stats.ipackets;
@@ -771,16 +805,6 @@ static int pcap_dpdk_activate(pcap_t *p)
 			return PCAP_ERROR_NO_SUCH_DEVICE;
 		}
 
-		ret = dpdk_init_timer(pd);
-		if (ret<0)
-		{
-			snprintf(p->errbuf, PCAP_ERRBUF_SIZE,
-				"dpdk error: Init timer is zero with device %s",
-				p->opt.device);
-			ret = PCAP_ERROR;
-			break;
-		}
-
 		nb_ports = rte_eth_dev_count_avail();
 		if (nb_ports == 0)
 		{
@@ -801,6 +825,16 @@ static int pcap_dpdk_activate(pcap_t *p)
 
 		pd->portid = portid;
 
+		ret = dpdk_init_timer(pd);
+		if (ret<0)
+		{
+			snprintf(p->errbuf, PCAP_ERRBUF_SIZE,
+				"dpdk error: Init timer is zero with device %s",
+				p->opt.device);
+			ret = PCAP_ERROR;
+			break;
+		}
+
 		if (p->snapshot <= 0 || p->snapshot > MAXIMUM_SNAPLEN)
 		{
 			p->snapshot = MAXIMUM_SNAPLEN;
@@ -823,6 +857,9 @@ static int pcap_dpdk_activate(pcap_t *p)
 		{
 			local_port_conf.txmode.offloads |=DEV_TX_OFFLOAD_MBUF_FAST_FREE;
 		}
+
+		local_port_conf.rxmode.offloads |= DEV_RX_OFFLOAD_TIMESTAMP;
+
 		// only support 1 queue
 		ret = rte_eth_dev_configure(portid, 1, 1, &local_port_conf);
 		if (ret < 0)
@@ -919,7 +956,7 @@ static int pcap_dpdk_activate(pcap_t *p)
 		}
 		// reset statistics
 		rte_eth_stats_reset(pd->portid);
-		calculate_timestamp(&(pd->ts_helper), &(pd->prev_ts));
+		calculate_timestamp(&(pd->ts_helper), &(pd->prev_ts), NULL);
 		rte_eth_stats_get(pd->portid,&(pd->prev_stats));
 		// format pcap_t
 		pd->portid = portid;
@@ -974,6 +1011,25 @@ pcap_t * pcap_dpdk_create(const char *device, char *ebuf, int *is_ours)
 	//memset will happen
 	p = PCAP_CREATE_COMMON(ebuf, struct pcap_dpdk);
 
+	// timestamps feature
+	p->tstamp_precision_count = 2;
+	p->tstamp_precision_list = malloc(2 * sizeof(u_int));
+	if (p->tstamp_precision_list == NULL) {
+		pcap_fmt_errmsg_for_errno(ebuf, PCAP_ERRBUF_SIZE,
+		    errno, "malloc");
+		pcap_close(p);
+		return NULL;
+	}
+	p->tstamp_precision_list[0] = PCAP_TSTAMP_PRECISION_MICRO;
+	p->tstamp_precision_list[1] = PCAP_TSTAMP_PRECISION_NANO;
+
+	u_int i;
+
+	p->tstamp_type_count = NUM_SOF_TIMESTAMPING_TYPES;
+	p->tstamp_type_list = malloc(NUM_SOF_TIMESTAMPING_TYPES * sizeof(u_int));
+	for (i = 0; i < NUM_SOF_TIMESTAMPING_TYPES; i++)
+		p->tstamp_type_list[i] = sof_ts_type_map[i].pcap_tstamp_val;
+
 	if (p == NULL)
 		return NULL;
 	p->activate_op = pcap_dpdk_activate;
-- 
2.17.1

